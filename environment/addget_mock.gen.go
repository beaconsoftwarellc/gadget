// Code generated by MockGen. DO NOT EDIT.
// Source: addget.go
//
// Generated by this command:
//
//	mockgen -source=addget.go -package environment -destination addget_mock.gen.go
//
// Package environment is a generated GoMock package.
package environment

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAddGet is a mock of AddGet interface.
type MockAddGet struct {
	ctrl     *gomock.Controller
	recorder *MockAddGetMockRecorder
}

// MockAddGetMockRecorder is the mock recorder for MockAddGet.
type MockAddGetMockRecorder struct {
	mock *MockAddGet
}

// NewMockAddGet creates a new mock instance.
func NewMockAddGet(ctrl *gomock.Controller) *MockAddGet {
	mock := &MockAddGet{ctrl: ctrl}
	mock.recorder = &MockAddGetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddGet) EXPECT() *MockAddGetMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAddGet) Add(project string, data map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", project, data)
}

// Add indicates an expected call of Add.
func (mr *MockAddGetMockRecorder) Add(project, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAddGet)(nil).Add), project, data)
}

// Get mocks base method.
func (m *MockAddGet) Get(project, key string) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", project, key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAddGetMockRecorder) Get(project, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAddGet)(nil).Get), project, key)
}
