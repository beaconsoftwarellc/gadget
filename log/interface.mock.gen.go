// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package log is a generated GoMock package.
package log

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Access mocks base method.
func (m *MockLogger) Access(e error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Access", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Access indicates an expected call of Access.
func (mr *MockLoggerMockRecorder) Access(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Access", reflect.TypeOf((*MockLogger)(nil).Access), e)
}

// Accessf mocks base method.
func (m *MockLogger) Accessf(format string, a ...interface{}) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Accessf", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Accessf indicates an expected call of Accessf.
func (mr *MockLoggerMockRecorder) Accessf(format interface{}, a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accessf", reflect.TypeOf((*MockLogger)(nil).Accessf), varargs...)
}

// AddOutput mocks base method.
func (m *MockLogger) AddOutput(arg0 Output) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOutput", arg0)
}

// AddOutput indicates an expected call of AddOutput.
func (mr *MockLoggerMockRecorder) AddOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOutput", reflect.TypeOf((*MockLogger)(nil).AddOutput), arg0)
}

// Audit mocks base method.
func (m *MockLogger) Audit(e error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Audit", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Audit indicates an expected call of Audit.
func (mr *MockLoggerMockRecorder) Audit(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Audit", reflect.TypeOf((*MockLogger)(nil).Audit), e)
}

// Auditf mocks base method.
func (m *MockLogger) Auditf(format string, a ...interface{}) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Auditf", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Auditf indicates an expected call of Auditf.
func (mr *MockLoggerMockRecorder) Auditf(format interface{}, a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auditf", reflect.TypeOf((*MockLogger)(nil).Auditf), varargs...)
}

// Debug mocks base method.
func (m *MockLogger) Debug(e error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), e)
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(format string, a ...interface{}) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Debugf", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(format interface{}, a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(e error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), e)
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(format string, a ...interface{}) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Errorf", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(format interface{}, a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// Fatal mocks base method.
func (m *MockLogger) Fatal(e error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fatal", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), e)
}

// Fatalf mocks base method.
func (m *MockLogger) Fatalf(format string, a ...interface{}) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Fatalf", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Fatalf indicates an expected call of Fatalf.
func (mr *MockLoggerMockRecorder) Fatalf(format interface{}, a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockLogger)(nil).Fatalf), varargs...)
}

// GetSessionID mocks base method.
func (m *MockLogger) GetSessionID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSessionID indicates an expected call of GetSessionID.
func (mr *MockLoggerMockRecorder) GetSessionID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionID", reflect.TypeOf((*MockLogger)(nil).GetSessionID))
}

// Info mocks base method.
func (m *MockLogger) Info(e error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), e)
}

// Infof mocks base method.
func (m *MockLogger) Infof(format string, a ...interface{}) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Infof", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Infof indicates an expected call of Infof.
func (mr *MockLoggerMockRecorder) Infof(format interface{}, a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
}

// New mocks base method.
func (m *MockLogger) New(id string) Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", id)
	ret0, _ := ret[0].(Logger)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockLoggerMockRecorder) New(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockLogger)(nil).New), id)
}

// SetSessionID mocks base method.
func (m *MockLogger) SetSessionID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSessionID", arg0)
}

// SetSessionID indicates an expected call of SetSessionID.
func (mr *MockLoggerMockRecorder) SetSessionID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSessionID", reflect.TypeOf((*MockLogger)(nil).SetSessionID), arg0)
}

// Warn mocks base method.
func (m *MockLogger) Warn(e error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Warn", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), e)
}

// Warnf mocks base method.
func (m *MockLogger) Warnf(format string, a ...interface{}) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Warnf", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Warnf indicates an expected call of Warnf.
func (mr *MockLoggerMockRecorder) Warnf(format interface{}, a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockLogger)(nil).Warnf), varargs...)
}

// MockTracer is a mock of Tracer interface.
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
}

// MockTracerMockRecorder is the mock recorder for MockTracer.
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance.
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// Trace mocks base method.
func (m *MockTracer) Trace() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trace")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Trace indicates an expected call of Trace.
func (mr *MockTracerMockRecorder) Trace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockTracer)(nil).Trace))
}

// MockTracerError is a mock of TracerError interface.
type MockTracerError struct {
	ctrl     *gomock.Controller
	recorder *MockTracerErrorMockRecorder
}

// MockTracerErrorMockRecorder is the mock recorder for MockTracerError.
type MockTracerErrorMockRecorder struct {
	mock *MockTracerError
}

// NewMockTracerError creates a new mock instance.
func NewMockTracerError(ctrl *gomock.Controller) *MockTracerError {
	mock := &MockTracerError{ctrl: ctrl}
	mock.recorder = &MockTracerErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracerError) EXPECT() *MockTracerErrorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockTracerError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockTracerErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockTracerError)(nil).Error))
}

// Trace mocks base method.
func (m *MockTracerError) Trace() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trace")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Trace indicates an expected call of Trace.
func (mr *MockTracerErrorMockRecorder) Trace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockTracerError)(nil).Trace))
}
