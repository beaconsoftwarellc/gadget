// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"

	qb "github.com/beaconsoftwarellc/gadget/v2/database/qb"
	record "github.com/beaconsoftwarellc/gadget/v2/database/record"
	transaction "github.com/beaconsoftwarellc/gadget/v2/database/transaction"
	errors "github.com/beaconsoftwarellc/gadget/v2/errors"
	gomock "github.com/golang/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockAPI) Begin() errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockAPIMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockAPI)(nil).Begin))
}

// Commit mocks base method.
func (m *MockAPI) Commit() errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockAPIMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockAPI)(nil).Commit))
}

// CommitOrRollback mocks base method.
func (m *MockAPI) CommitOrRollback(err error) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitOrRollback", err)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// CommitOrRollback indicates an expected call of CommitOrRollback.
func (mr *MockAPIMockRecorder) CommitOrRollback(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitOrRollback", reflect.TypeOf((*MockAPI)(nil).CommitOrRollback), err)
}

// Count mocks base method.
func (m *MockAPI) Count(arg0 qb.Table, arg1 *qb.SelectQuery) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockAPIMockRecorder) Count(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockAPI)(nil).Count), arg0, arg1)
}

// CountWhere mocks base method.
func (m *MockAPI) CountWhere(arg0 qb.Table, arg1 *qb.ConditionExpression) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWhere", arg0, arg1)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountWhere indicates an expected call of CountWhere.
func (mr *MockAPIMockRecorder) CountWhere(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWhere", reflect.TypeOf((*MockAPI)(nil).CountWhere), arg0, arg1)
}

// Create mocks base method.
func (m *MockAPI) Create(obj record.Record) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", obj)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAPIMockRecorder) Create(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAPI)(nil).Create), obj)
}

// Delete mocks base method.
func (m *MockAPI) Delete(obj record.Record) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", obj)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAPIMockRecorder) Delete(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAPI)(nil).Delete), obj)
}

// DeleteWhere mocks base method.
func (m *MockAPI) DeleteWhere(obj record.Record, condition *qb.ConditionExpression) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWhere", obj, condition)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// DeleteWhere indicates an expected call of DeleteWhere.
func (mr *MockAPIMockRecorder) DeleteWhere(obj, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWhere", reflect.TypeOf((*MockAPI)(nil).DeleteWhere), obj, condition)
}

// GetTransaction mocks base method.
func (m *MockAPI) GetTransaction() transaction.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction")
	ret0, _ := ret[0].(transaction.Transaction)
	return ret0
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockAPIMockRecorder) GetTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockAPI)(nil).GetTransaction))
}

// ListWhere mocks base method.
func (m *MockAPI) ListWhere(meta record.Record, target interface{}, condition *qb.ConditionExpression, options *record.ListOptions) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWhere", meta, target, condition, options)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// ListWhere indicates an expected call of ListWhere.
func (mr *MockAPIMockRecorder) ListWhere(meta, target, condition, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWhere", reflect.TypeOf((*MockAPI)(nil).ListWhere), meta, target, condition, options)
}

// Read mocks base method.
func (m *MockAPI) Read(obj record.Record, pk record.PrimaryKeyValue) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", obj, pk)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockAPIMockRecorder) Read(obj, pk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockAPI)(nil).Read), obj, pk)
}

// ReadOneWhere mocks base method.
func (m *MockAPI) ReadOneWhere(obj record.Record, condition *qb.ConditionExpression) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOneWhere", obj, condition)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// ReadOneWhere indicates an expected call of ReadOneWhere.
func (mr *MockAPIMockRecorder) ReadOneWhere(obj, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOneWhere", reflect.TypeOf((*MockAPI)(nil).ReadOneWhere), obj, condition)
}

// Rollback mocks base method.
func (m *MockAPI) Rollback() errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockAPIMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockAPI)(nil).Rollback))
}

// Select mocks base method.
func (m *MockAPI) Select(target interface{}, query *qb.SelectQuery, options *record.ListOptions) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", target, query, options)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockAPIMockRecorder) Select(target, query, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockAPI)(nil).Select), target, query, options)
}

// Update mocks base method.
func (m *MockAPI) Update(obj record.Record) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", obj)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAPIMockRecorder) Update(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAPI)(nil).Update), obj)
}

// UpdateWhere mocks base method.
func (m *MockAPI) UpdateWhere(obj record.Record, where *qb.ConditionExpression, fields ...qb.FieldValue) (int64, errors.TracerError) {
	m.ctrl.T.Helper()
	varargs := []interface{}{obj, where}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWhere", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(errors.TracerError)
	return ret0, ret1
}

// UpdateWhere indicates an expected call of UpdateWhere.
func (mr *MockAPIMockRecorder) UpdateWhere(obj, where interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{obj, where}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWhere", reflect.TypeOf((*MockAPI)(nil).UpdateWhere), varargs...)
}
