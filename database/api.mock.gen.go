// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package database is a generated GoMock package.
package database

import (
	sql "database/sql"
	reflect "reflect"
	time "time"

	qb "github.com/beaconsoftwarellc/gadget/v2/database/qb"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransaction) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit))
}

// Exec mocks base method.
func (m *MockTransaction) Exec(query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockTransactionMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockTransaction)(nil).Exec), varargs...)
}

// NamedExec mocks base method.
func (m *MockTransaction) NamedExec(query string, arg interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedExec", query, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedExec indicates an expected call of NamedExec.
func (mr *MockTransactionMockRecorder) NamedExec(query, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedExec", reflect.TypeOf((*MockTransaction)(nil).NamedExec), query, arg)
}

// NamedQuery mocks base method.
func (m *MockTransaction) NamedQuery(query string, arg interface{}) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedQuery", query, arg)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedQuery indicates an expected call of NamedQuery.
func (mr *MockTransactionMockRecorder) NamedQuery(query, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedQuery", reflect.TypeOf((*MockTransaction)(nil).NamedQuery), query, arg)
}

// QueryRowx mocks base method.
func (m *MockTransaction) QueryRowx(query string, args ...interface{}) *sqlx.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowx", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	return ret0
}

// QueryRowx indicates an expected call of QueryRowx.
func (mr *MockTransactionMockRecorder) QueryRowx(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowx", reflect.TypeOf((*MockTransaction)(nil).QueryRowx), varargs...)
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback))
}

// Select mocks base method.
func (m *MockTransaction) Select(dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockTransactionMockRecorder) Select(dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockTransaction)(nil).Select), varargs...)
}

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockAPI) Begin() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(error)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockAPIMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockAPI)(nil).Begin))
}

// Commit mocks base method.
func (m *MockAPI) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockAPIMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockAPI)(nil).Commit))
}

// CommitOrRollback mocks base method.
func (m *MockAPI) CommitOrRollback(err error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitOrRollback", err)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitOrRollback indicates an expected call of CommitOrRollback.
func (mr *MockAPIMockRecorder) CommitOrRollback(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitOrRollback", reflect.TypeOf((*MockAPI)(nil).CommitOrRollback), err)
}

// Create mocks base method.
func (m *MockAPI) Create(obj Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAPIMockRecorder) Create(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAPI)(nil).Create), obj)
}

// Delete mocks base method.
func (m *MockAPI) Delete(obj Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAPIMockRecorder) Delete(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAPI)(nil).Delete), obj)
}

// DeleteWhere mocks base method.
func (m *MockAPI) DeleteWhere(obj Record, condition *qb.ConditionExpression) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWhere", obj, condition)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWhere indicates an expected call of DeleteWhere.
func (mr *MockAPIMockRecorder) DeleteWhere(obj, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWhere", reflect.TypeOf((*MockAPI)(nil).DeleteWhere), obj, condition)
}

// ListWhere mocks base method.
func (m *MockAPI) ListWhere(meta Record, target interface{}, condition *qb.ConditionExpression, options *ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWhere", meta, target, condition, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListWhere indicates an expected call of ListWhere.
func (mr *MockAPIMockRecorder) ListWhere(meta, target, condition, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWhere", reflect.TypeOf((*MockAPI)(nil).ListWhere), meta, target, condition, options)
}

// Read mocks base method.
func (m *MockAPI) Read(obj Record, pk PrimaryKeyValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", obj, pk)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockAPIMockRecorder) Read(obj, pk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockAPI)(nil).Read), obj, pk)
}

// ReadOneWhere mocks base method.
func (m *MockAPI) ReadOneWhere(obj Record, condition *qb.ConditionExpression) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOneWhere", obj, condition)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadOneWhere indicates an expected call of ReadOneWhere.
func (mr *MockAPIMockRecorder) ReadOneWhere(obj, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOneWhere", reflect.TypeOf((*MockAPI)(nil).ReadOneWhere), obj, condition)
}

// Rollback mocks base method.
func (m *MockAPI) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockAPIMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockAPI)(nil).Rollback))
}

// Select mocks base method.
func (m *MockAPI) Select(target interface{}, query *qb.SelectQuery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", target, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockAPIMockRecorder) Select(target, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockAPI)(nil).Select), target, query)
}

// SelectList mocks base method.
func (m *MockAPI) SelectList(target interface{}, query *qb.SelectQuery, options *ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectList", target, query, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectList indicates an expected call of SelectList.
func (mr *MockAPIMockRecorder) SelectList(target, query, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectList", reflect.TypeOf((*MockAPI)(nil).SelectList), target, query, options)
}

// SetSlowQueryDuration mocks base method.
func (m *MockAPI) SetSlowQueryDuration(threshold time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSlowQueryDuration", threshold)
}

// SetSlowQueryDuration indicates an expected call of SetSlowQueryDuration.
func (mr *MockAPIMockRecorder) SetSlowQueryDuration(threshold interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSlowQueryDuration", reflect.TypeOf((*MockAPI)(nil).SetSlowQueryDuration), threshold)
}

// Update mocks base method.
func (m *MockAPI) Update(obj Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAPIMockRecorder) Update(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAPI)(nil).Update), obj)
}

// UpdateWhere mocks base method.
func (m *MockAPI) UpdateWhere(obj Record, where *qb.ConditionExpression, fields ...qb.FieldValue) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{obj, where}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWhere", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWhere indicates an expected call of UpdateWhere.
func (mr *MockAPIMockRecorder) UpdateWhere(obj, where interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{obj, where}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWhere", reflect.TypeOf((*MockAPI)(nil).UpdateWhere), varargs...)
}
