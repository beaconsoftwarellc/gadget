// Code generated by MockGen. DO NOT EDIT.
// Source: implementation.go
//
// Generated by this command:
//
//	mockgen -source=implementation.go -package transaction -destination implementation.mock.gen.go
//
// Package transaction is a generated GoMock package.
package transaction

import (
	sql "database/sql"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockImplementation is a mock of Implementation interface.
type MockImplementation struct {
	ctrl     *gomock.Controller
	recorder *MockImplementationMockRecorder
}

// MockImplementationMockRecorder is the mock recorder for MockImplementation.
type MockImplementationMockRecorder struct {
	mock *MockImplementation
}

// NewMockImplementation creates a new mock instance.
func NewMockImplementation(ctrl *gomock.Controller) *MockImplementation {
	mock := &MockImplementation{ctrl: ctrl}
	mock.recorder = &MockImplementationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImplementation) EXPECT() *MockImplementationMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockImplementation) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockImplementationMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockImplementation)(nil).Commit))
}

// Exec mocks base method.
func (m *MockImplementation) Exec(query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockImplementationMockRecorder) Exec(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockImplementation)(nil).Exec), varargs...)
}

// NamedExec mocks base method.
func (m *MockImplementation) NamedExec(query string, arg any) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedExec", query, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedExec indicates an expected call of NamedExec.
func (mr *MockImplementationMockRecorder) NamedExec(query, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedExec", reflect.TypeOf((*MockImplementation)(nil).NamedExec), query, arg)
}

// NamedQuery mocks base method.
func (m *MockImplementation) NamedQuery(query string, arg any) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedQuery", query, arg)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedQuery indicates an expected call of NamedQuery.
func (mr *MockImplementationMockRecorder) NamedQuery(query, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedQuery", reflect.TypeOf((*MockImplementation)(nil).NamedQuery), query, arg)
}

// PrepareNamed mocks base method.
func (m *MockImplementation) PrepareNamed(query string) (*sqlx.NamedStmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareNamed", query)
	ret0, _ := ret[0].(*sqlx.NamedStmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareNamed indicates an expected call of PrepareNamed.
func (mr *MockImplementationMockRecorder) PrepareNamed(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareNamed", reflect.TypeOf((*MockImplementation)(nil).PrepareNamed), query)
}

// Preparex mocks base method.
func (m *MockImplementation) Preparex(query string) (*sqlx.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preparex", query)
	ret0, _ := ret[0].(*sqlx.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Preparex indicates an expected call of Preparex.
func (mr *MockImplementationMockRecorder) Preparex(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preparex", reflect.TypeOf((*MockImplementation)(nil).Preparex), query)
}

// QueryRowx mocks base method.
func (m *MockImplementation) QueryRowx(query string, args ...any) *sqlx.Row {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowx", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	return ret0
}

// QueryRowx indicates an expected call of QueryRowx.
func (mr *MockImplementationMockRecorder) QueryRowx(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowx", reflect.TypeOf((*MockImplementation)(nil).QueryRowx), varargs...)
}

// Rollback mocks base method.
func (m *MockImplementation) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockImplementationMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockImplementation)(nil).Rollback))
}

// Select mocks base method.
func (m *MockImplementation) Select(dest any, query string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockImplementationMockRecorder) Select(dest, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockImplementation)(nil).Select), varargs...)
}
