// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go

// Package transaction is a generated GoMock package.
package transaction

import (
	reflect "reflect"

	qb "github.com/beaconsoftwarellc/gadget/v2/database/qb"
	record "github.com/beaconsoftwarellc/gadget/v2/database/record"
	errors "github.com/beaconsoftwarellc/gadget/v2/errors"
	gomock "github.com/golang/mock/gomock"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransaction) Commit() errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit))
}

// Create mocks base method.
func (m *MockTransaction) Create(arg0 record.Record) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTransactionMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransaction)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockTransaction) Delete(arg0 record.Record) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTransactionMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTransaction)(nil).Delete), arg0)
}

// DeleteWhere mocks base method.
func (m *MockTransaction) DeleteWhere(arg0 record.Record, arg1 *qb.ConditionExpression) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWhere", arg0, arg1)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// DeleteWhere indicates an expected call of DeleteWhere.
func (mr *MockTransactionMockRecorder) DeleteWhere(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWhere", reflect.TypeOf((*MockTransaction)(nil).DeleteWhere), arg0, arg1)
}

// Implementation mocks base method.
func (m *MockTransaction) Implementation() Implementation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Implementation")
	ret0, _ := ret[0].(Implementation)
	return ret0
}

// Implementation indicates an expected call of Implementation.
func (mr *MockTransactionMockRecorder) Implementation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Implementation", reflect.TypeOf((*MockTransaction)(nil).Implementation))
}

// List mocks base method.
func (m *MockTransaction) List(arg0 record.Record, arg1 any, arg2 record.ListOptions) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockTransactionMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTransaction)(nil).List), arg0, arg1, arg2)
}

// ListWhere mocks base method.
func (m *MockTransaction) ListWhere(arg0 record.Record, arg1 any, arg2 *qb.ConditionExpression, arg3 record.ListOptions) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWhere", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// ListWhere indicates an expected call of ListWhere.
func (mr *MockTransactionMockRecorder) ListWhere(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWhere", reflect.TypeOf((*MockTransaction)(nil).ListWhere), arg0, arg1, arg2, arg3)
}

// Read mocks base method.
func (m *MockTransaction) Read(arg0 record.Record, arg1 record.PrimaryKeyValue) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Read indicates an expected call of Read.
func (mr *MockTransactionMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTransaction)(nil).Read), arg0, arg1)
}

// ReadOneWhere mocks base method.
func (m *MockTransaction) ReadOneWhere(arg0 record.Record, arg1 *qb.ConditionExpression) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOneWhere", arg0, arg1)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// ReadOneWhere indicates an expected call of ReadOneWhere.
func (mr *MockTransactionMockRecorder) ReadOneWhere(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOneWhere", reflect.TypeOf((*MockTransaction)(nil).ReadOneWhere), arg0, arg1)
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback() errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback))
}

// Select mocks base method.
func (m *MockTransaction) Select(target any, query *qb.SelectQuery, limit, offset uint) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", target, query, limit, offset)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockTransactionMockRecorder) Select(target, query, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockTransaction)(nil).Select), target, query, limit, offset)
}

// SelectList mocks base method.
func (m *MockTransaction) SelectList(arg0 any, arg1 *qb.SelectQuery, arg2 record.ListOptions) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectList", arg0, arg1, arg2)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// SelectList indicates an expected call of SelectList.
func (mr *MockTransactionMockRecorder) SelectList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectList", reflect.TypeOf((*MockTransaction)(nil).SelectList), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockTransaction) Update(arg0 record.Record) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTransactionMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransaction)(nil).Update), arg0)
}

// UpdateWhere mocks base method.
func (m *MockTransaction) UpdateWhere(arg0 record.Record, arg1 *qb.ConditionExpression, arg2 ...qb.FieldValue) (int64, errors.TracerError) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWhere", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(errors.TracerError)
	return ret0, ret1
}

// UpdateWhere indicates an expected call of UpdateWhere.
func (mr *MockTransactionMockRecorder) UpdateWhere(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWhere", reflect.TypeOf((*MockTransaction)(nil).UpdateWhere), varargs...)
}

// Upsert mocks base method.
func (m *MockTransaction) Upsert(arg0 record.Record) errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0)
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockTransactionMockRecorder) Upsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockTransaction)(nil).Upsert), arg0)
}
