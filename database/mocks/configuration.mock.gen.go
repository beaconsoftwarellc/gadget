// Code generated by MockGen. DO NOT EDIT.
// Source: configuration.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	log "github.com/beaconsoftwarellc/gadget/v2/log"
	gomock "github.com/golang/mock/gomock"
)

// MockConfiguration is a mock of Configuration interface.
type MockConfiguration struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationMockRecorder
}

// MockConfigurationMockRecorder is the mock recorder for MockConfiguration.
type MockConfigurationMockRecorder struct {
	mock *MockConfiguration
}

// NewMockConfiguration creates a new mock instance.
func NewMockConfiguration(ctrl *gomock.Controller) *MockConfiguration {
	mock := &MockConfiguration{ctrl: ctrl}
	mock.recorder = &MockConfigurationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfiguration) EXPECT() *MockConfigurationMockRecorder {
	return m.recorder
}

// DatabaseConnection mocks base method.
func (m *MockConfiguration) DatabaseConnection() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseConnection")
	ret0, _ := ret[0].(string)
	return ret0
}

// DatabaseConnection indicates an expected call of DatabaseConnection.
func (mr *MockConfigurationMockRecorder) DatabaseConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseConnection", reflect.TypeOf((*MockConfiguration)(nil).DatabaseConnection))
}

// DatabaseDialect mocks base method.
func (m *MockConfiguration) DatabaseDialect() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseDialect")
	ret0, _ := ret[0].(string)
	return ret0
}

// DatabaseDialect indicates an expected call of DatabaseDialect.
func (mr *MockConfigurationMockRecorder) DatabaseDialect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseDialect", reflect.TypeOf((*MockConfiguration)(nil).DatabaseDialect))
}

// LoggedSlowQueries mocks base method.
func (m *MockConfiguration) LoggedSlowQueries() map[string]time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoggedSlowQueries")
	ret0, _ := ret[0].(map[string]time.Duration)
	return ret0
}

// LoggedSlowQueries indicates an expected call of LoggedSlowQueries.
func (mr *MockConfigurationMockRecorder) LoggedSlowQueries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoggedSlowQueries", reflect.TypeOf((*MockConfiguration)(nil).LoggedSlowQueries))
}

// Logger mocks base method.
func (m *MockConfiguration) Logger() log.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(log.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockConfigurationMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockConfiguration)(nil).Logger))
}

// MaxQueryLimit mocks base method.
func (m *MockConfiguration) MaxQueryLimit() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxQueryLimit")
	ret0, _ := ret[0].(uint)
	return ret0
}

// MaxQueryLimit indicates an expected call of MaxQueryLimit.
func (mr *MockConfigurationMockRecorder) MaxQueryLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxQueryLimit", reflect.TypeOf((*MockConfiguration)(nil).MaxQueryLimit))
}

// NumberOfRetries mocks base method.
func (m *MockConfiguration) NumberOfRetries() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumberOfRetries")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumberOfRetries indicates an expected call of NumberOfRetries.
func (mr *MockConfigurationMockRecorder) NumberOfRetries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberOfRetries", reflect.TypeOf((*MockConfiguration)(nil).NumberOfRetries))
}

// SlowQueryThreshold mocks base method.
func (m *MockConfiguration) SlowQueryThreshold() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SlowQueryThreshold")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// SlowQueryThreshold indicates an expected call of SlowQueryThreshold.
func (mr *MockConfigurationMockRecorder) SlowQueryThreshold() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SlowQueryThreshold", reflect.TypeOf((*MockConfiguration)(nil).SlowQueryThreshold))
}

// WaitBetweenRetries mocks base method.
func (m *MockConfiguration) WaitBetweenRetries() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitBetweenRetries")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// WaitBetweenRetries indicates an expected call of WaitBetweenRetries.
func (mr *MockConfigurationMockRecorder) WaitBetweenRetries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitBetweenRetries", reflect.TypeOf((*MockConfiguration)(nil).WaitBetweenRetries))
}
