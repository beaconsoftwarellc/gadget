// Code generated by MockGen. DO NOT EDIT.
// Source: bulkupdate.go
//
// Generated by this command:
//
//	mockgen -source=bulkupdate.go -package mocks -destination mocks/bulkupdate.mock.gen.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"

	record "github.com/beaconsoftwarellc/gadget/v2/database/record"
	errors "github.com/beaconsoftwarellc/gadget/v2/errors"
	gomock "go.uber.org/mock/gomock"
)

// MockBulkUpdate is a mock of BulkUpdate interface.
type MockBulkUpdate[T record.Record] struct {
	ctrl     *gomock.Controller
	recorder *MockBulkUpdateMockRecorder[T]
}

// MockBulkUpdateMockRecorder is the mock recorder for MockBulkUpdate.
type MockBulkUpdateMockRecorder[T record.Record] struct {
	mock *MockBulkUpdate[T]
}

// NewMockBulkUpdate creates a new mock instance.
func NewMockBulkUpdate[T record.Record](ctrl *gomock.Controller) *MockBulkUpdate[T] {
	mock := &MockBulkUpdate[T]{ctrl: ctrl}
	mock.recorder = &MockBulkUpdateMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBulkUpdate[T]) EXPECT() *MockBulkUpdateMockRecorder[T] {
	return m.recorder
}

// Commit mocks base method.
func (m *MockBulkUpdate[T]) Commit() (sql.Result, errors.TracerError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(errors.TracerError)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockBulkUpdateMockRecorder[T]) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockBulkUpdate[T])(nil).Commit))
}

// Reset mocks base method.
func (m *MockBulkUpdate[T]) Reset() errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockBulkUpdateMockRecorder[T]) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockBulkUpdate[T])(nil).Reset))
}

// Rollback mocks base method.
func (m *MockBulkUpdate[T]) Rollback() errors.TracerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(errors.TracerError)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockBulkUpdateMockRecorder[T]) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockBulkUpdate[T])(nil).Rollback))
}

// Update mocks base method.
func (m *MockBulkUpdate[T]) Update(objs ...T) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range objs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Update", varargs...)
}

// Update indicates an expected call of Update.
func (mr *MockBulkUpdateMockRecorder[T]) Update(objs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBulkUpdate[T])(nil).Update), objs...)
}
