// Code generated by MockGen. DO NOT EDIT.
// Source: enqueuer.go
//
// Generated by this command:
//
//	mockgen -package messagequeue -source enqueuer.go -destination mock_enqueuer.go
//

// Package messagequeue is a generated GoMock package.
package messagequeue

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEnqueuer is a mock of Enqueuer interface.
type MockEnqueuer struct {
	ctrl     *gomock.Controller
	recorder *MockEnqueuerMockRecorder
	isgomock struct{}
}

// MockEnqueuerMockRecorder is the mock recorder for MockEnqueuer.
type MockEnqueuerMockRecorder struct {
	mock *MockEnqueuer
}

// NewMockEnqueuer creates a new mock instance.
func NewMockEnqueuer(ctrl *gomock.Controller) *MockEnqueuer {
	mock := &MockEnqueuer{ctrl: ctrl}
	mock.recorder = &MockEnqueuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnqueuer) EXPECT() *MockEnqueuerMockRecorder {
	return m.recorder
}

// Enqueue mocks base method.
func (m *MockEnqueuer) Enqueue(messages *Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockEnqueuerMockRecorder) Enqueue(messages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockEnqueuer)(nil).Enqueue), messages)
}

// Start mocks base method.
func (m *MockEnqueuer) Start(messageQueue MessageQueue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", messageQueue)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockEnqueuerMockRecorder) Start(messageQueue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockEnqueuer)(nil).Start), messageQueue)
}

// Stop mocks base method.
func (m *MockEnqueuer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockEnqueuerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockEnqueuer)(nil).Stop))
}
