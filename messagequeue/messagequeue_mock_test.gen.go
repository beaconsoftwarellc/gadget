// Code generated by MockGen. DO NOT EDIT.
// Source: messagequeue.go
//
// Generated by this command:
//
//	mockgen -package messagequeue -source messagequeue.go -destination messagequeue_mock_test.gen.go
//

// Package messagequeue is a generated GoMock package.
package messagequeue

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockMessageQueue is a mock of MessageQueue interface.
type MockMessageQueue struct {
	ctrl     *gomock.Controller
	recorder *MockMessageQueueMockRecorder
	isgomock struct{}
}

// MockMessageQueueMockRecorder is the mock recorder for MockMessageQueue.
type MockMessageQueueMockRecorder struct {
	mock *MockMessageQueue
}

// NewMockMessageQueue creates a new mock instance.
func NewMockMessageQueue(ctrl *gomock.Controller) *MockMessageQueue {
	mock := &MockMessageQueue{ctrl: ctrl}
	mock.recorder = &MockMessageQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageQueue) EXPECT() *MockMessageQueueMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMessageQueue) Delete(arg0 context.Context, arg1 *Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMessageQueueMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessageQueue)(nil).Delete), arg0, arg1)
}

// Dequeue mocks base method.
func (m *MockMessageQueue) Dequeue(ctx context.Context, count int, wait, visibilityTimeout time.Duration) ([]*Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dequeue", ctx, count, wait, visibilityTimeout)
	ret0, _ := ret[0].([]*Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dequeue indicates an expected call of Dequeue.
func (mr *MockMessageQueueMockRecorder) Dequeue(ctx, count, wait, visibilityTimeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockMessageQueue)(nil).Dequeue), ctx, count, wait, visibilityTimeout)
}

// EnqueueBatch mocks base method.
func (m *MockMessageQueue) EnqueueBatch(arg0 context.Context, arg1 []*Message) ([]*EnqueueMessageResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueBatch", arg0, arg1)
	ret0, _ := ret[0].([]*EnqueueMessageResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnqueueBatch indicates an expected call of EnqueueBatch.
func (mr *MockMessageQueueMockRecorder) EnqueueBatch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueBatch", reflect.TypeOf((*MockMessageQueue)(nil).EnqueueBatch), arg0, arg1)
}
